const Book = require('../models/book');
const sharp = require('sharp'); //  Permet de redimensionner les images
const fs = require('fs'); //  File System, permet de supprimer l'image du serveur

// R√©cup√©rer tous les livres
exports.getAllBooks = (req, res) => {
  Book.find()
    .then(books => res.status(200).json(books))
    .catch(error => res.status(400).json({ error }));
};

// R√©cup√©rer un livre par son ID
exports.getOneBook = (req, res) => {
  Book.findOne({ _id: req.params.id })
    .then(book => res.status(200).json(book))
    .catch(error => res.status(404).json({ error }));
};

// Ajouter un livre
exports.createBook = async (req, res, next) => {
  // üîÑ On transforme la cha√Æne JSON envoy√©e par le front en objet JS
  const bookObject = JSON.parse(req.body.book);
  delete bookObject._id;       // ‚ùå On supprime l‚Äô_id (on ne veut pas qu‚Äôil vienne du client)
  delete bookObject.userId;    // ‚ùå On ignore le userId transmis (s√©curit√©)

  const originalFilename = req.file.filename;         // nom de l‚Äôimage originale
  const outputFilename = `optimized_${originalFilename.split('.')[0]}.webp`; // nom de l‚Äôimage optimis√©e
  const outputPath = `images/${outputFilename}`;      // chemin vers l‚Äôimage optimis√©e

  try {
    // üîß Traitement de l‚Äôimage avec Sharp
    await sharp(req.file.path)                 // le fichier temporaire qui vient d‚Äô√™tre upload√©
      .resize({ width: 600 })                  // ‚ÜîÔ∏è redimensionne √† 600px de large
      .webp({ quality: 80 })                   // üì¶ compresse √† 80% de qualit√©
      .toFile(outputPath);                     // üíæ enregistre dans le dossier /images

    // üóëÔ∏è Supprime l‚Äôimage d‚Äôorigine (non optimis√©e)
    fs.unlinkSync(req.file.path);

    // üìò Cr√©ation du livre avec image optimis√©e
    const book = new Book({
      ...bookObject,                             // ‚ú® Toutes les donn√©es du formulaire
      userId: req.auth.userId,                   // ‚úÖ Ajout de l'userId depuis le token
      imageUrl: `${req.protocol}://${req.get('host')}/images/${outputFilename}` // üîó URL compl√®te vers l‚Äôimage
    });

    await book.save(); // üíæ Sauvegarde en base de donn√©es
    res.status(201).json({ message: 'Livre enregistr√© avec image optimis√©e !' });
  } catch (error) {
    res.status(500).json({ error }); // ‚ùå Gestion des erreurs
  }
};

// Modifier un livre
  // Modifier un livre
exports.modifyBook = async (req, res) => {
  let bookObject;

  try {
    if (req.file) {
      // üì¶ Si une nouvelle image est envoy√©e, on l‚Äôoptimise avec Sharp
      const originalFilename = req.file.filename;
      const outputFilename = `optimized_${Date.now()}_${originalFilename.split('.')[0]}.webp`;
      const outputPath = `images/${outputFilename}`;

      await sharp(req.file.path)
        .resize({ width: 600 })
        .webp({ quality: 80 })
        .toFile(outputPath);

      // üóëÔ∏è On supprime l‚Äôimage d‚Äôorigine non optimis√©e
      fs.unlinkSync(req.file.path);

      // üîç On r√©cup√®re le livre pour supprimer l‚Äôancienne image
      const existingBook = await Book.findOne({ _id: req.params.id });
      if (existingBook && existingBook.imageUrl) {
        const oldFilename = existingBook.imageUrl.split('/images/')[1];
        fs.unlink(`images/${oldFilename}`, () => {});
      }

      // üì¶ On cr√©e l‚Äôobjet livre avec nouvelle image optimis√©e
      bookObject = {
        ...JSON.parse(req.body.book),
        imageUrl: `${req.protocol}://${req.get('host')}/images/${outputFilename}`
      };
    } else {
      // üéØ Aucune image chang√©e
      bookObject = { ...req.body };
    }

    // üîê On supprime le userId envoy√© par le front
    delete bookObject.userId;

    const book = await Book.findOne({ _id: req.params.id });

    if (book.userId !== req.auth.userId) {
      return res.status(401).json({ message: 'Non autoris√©' });
    }

    await Book.updateOne({ _id: req.params.id }, { ...bookObject, _id: req.params.id });
    res.status(200).json({ message: 'Livre modifi√© avec image optimis√©e !' });
  } catch (error) {
    res.status(400).json({ error });
  }
};

// Supprimer un livre
exports.deleteBook = (req, res, next) => {
  Book.findOne({ _id: req.params.id }) // On cherche le livre dans la base
    .then(book => {
      if (book.userId !== req.auth.userId) { // V√©rifie si l'utilisateur est bien le cr√©ateur
        return res.status(401).json({ message: 'Non autoris√© √† supprimer ce livre !' });
      }

      const filename = book.imageUrl.split('/images/')[1]; // On r√©cup√®re juste le nom du fichier
      fs.unlink(`images/${filename}`, () => { // On supprime le fichier image du dossier "images"
        Book.deleteOne({ _id: req.params.id }) // Ensuite on supprime le livre de la base
          .then(() => res.status(200).json({ message: 'Livre supprim√© avec succ√®s !' }))
          .catch(error => res.status(400).json({ error }));
      });
    })
    .catch(error => res.status(500).json({ error }));


    // Contr√¥leur pour ajouter une notation √† un livre
exports.rateBook = async (req, res) => {
  try {
    // On r√©cup√®re l'ID du livre √† partir des param√®tres d'URL (/books/:id/rating)
    const bookId = req.params.id;

    // On r√©cup√®re l'userId et la note (rating) envoy√©s par le client dans le body de la requ√™te
    const { userId, rating } = req.body;

    // Si la note est en dehors de l‚Äôintervalle autoris√©, on renvoie une erreur
    if (rating < 0 || rating > 5) {
      return res.status(400).json({ message: "La note doit √™tre entre 0 et 5." });
    }

    // On cherche le livre dans la base de donn√©es avec son ID
    const book = await Book.findById(bookId);

    // Si le livre n'existe pas, on renvoie une erreur
    if (!book) {
      return res.status(404).json({ message: "Livre non trouv√©." });
    }

    // On v√©rifie si l‚Äôutilisateur a d√©j√† not√© ce livre
    const alreadyRated = book.ratings.find(rating => rating.userId === userId);
    if (alreadyRated) {
      return res.status(400).json({ message: "Vous avez d√©j√† not√© ce livre." });
    }

    // Si tout est ok, on ajoute la nouvelle note dans le tableau ratings
    book.ratings.push({ userId, grade: rating });

    // On recalcule la note moyenne √† partir de toutes les notes
    const total = book.ratings.reduce((sum, r) => sum + r.grade, 0);
    book.averageRating = total / book.ratings.length;

    // On enregistre les modifications dans la base de donn√©es
    await book.save();

    // On renvoie le livre mis √† jour en r√©ponse
    res.status(200).json(book);

  } catch (error) {
    // En cas d'erreur inattendue, on renvoie une erreur 500 (erreur serveur)
    res.status(500).json({ error });
  }
};
};